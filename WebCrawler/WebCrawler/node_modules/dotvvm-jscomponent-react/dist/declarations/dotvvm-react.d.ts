/// <reference path="../../../Framework/obj/typescript-types/dotvvm.d.ts" />
/// <reference types="knockout" />
import * as React from 'react';
import type { StateManager } from 'state-manager';
export declare type KnockoutTemplateReactComponent_Props = {
    wrapperTag: string;
    templateName: string;
    getChildContext?: (context: KnockoutBindingContext) => KnockoutBindingContext;
    viewModel?: any;
};
export declare class KnockoutTemplateReactComponent extends React.Component<KnockoutTemplateReactComponent_Props> {
    static defaultProps: {
        wrapperTag: string;
    };
    wrapRef: React.RefObject<HTMLElement>;
    templateName: KnockoutObservable<any>;
    viewModelStateManager?: StateManager<any>;
    componentDidMount(): void;
    initializeTemplate(): void;
    componentDidUpdate(): void;
    updateStuff(): void;
    render(): React.DOMElement<React.DOMAttributes<HTMLElement>, HTMLElement>;
}
export declare const registerReactControl: (ReactControl: any, defaultProps?: {}) => {
    create: (elm: any, props: any, commands: any, templates: any) => {
        updateProps(updatedProps: any): void;
        dispose(): void;
    };
};
